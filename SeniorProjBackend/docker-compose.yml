services:
  seniorprojbackend:
    build:
      context: /home/jared/Senior_Project/SeniorProjBackend/Backend_Files
      dockerfile: Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Production
      - ASPNETCORE_URLS=http://+:8080
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - app-network
    restart: unless-stopped

  frontend:
    build:
      context: /home/jared/Senior_Project/SeniorProjFrontend
      dockerfile: Dockerfile
    environment:
      - NODE_ENV=production
    volumes:
      - /home/jared/Senior_Project/SeniorProjFrontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    command: ["pnpm", "start"]
    networks:
      - app-network
    restart: unless-stopped

  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - /etc/letsencrypt:/etc/letsencrypt:ro
    depends_on:
      - seniorprojbackend
      - frontend
    networks:
      - app-network

  postgres:
    image: postgres:latest
    container_name: postgres
    restart: always
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-Password123!!}
      POSTGRES_DB: ${POSTGRES_DB:-CodeCoach}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
